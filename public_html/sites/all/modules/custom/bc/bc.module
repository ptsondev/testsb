<?php

require_once('consts.php');
require_once('libs.php');
//require_once('forms/search_destination.php');

$arr_theme = array(   
    'support_online' => 'Support Online',
    'custom_login_area' => 'Custom login area',
    'bc_user_profile' => 'User Profile',
    'top_destinations' => 'Top Destinations',
    'search_result' => 'Search Result',
    'add_customer' => 'Add Customer',
    'add_todo' => 'Add To do thing',
);
define('ARR_THEME', serialize($arr_theme));

/**
 * Hook block_info
 */
function bc_block_info(){
    $arr_theme = unserialize(ARR_THEME); 
    foreach($arr_theme as $k=>$v){
        $blocks[$k] = array(
            'info' => $v
        );      
    }        
    return $blocks;
}

function bc_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
    $block['content'] = theme($delta);
    return $block;
}


function bc_theme() {
    $arr_theme = unserialize(ARR_THEME);
    $arr = array();
    foreach($arr_theme as $k=>$v){
        $arr[$k] = array(
            'path'=>drupal_get_path('module', 'bc') . '/templates',
            'template' => $k
        );
    }    
    return $arr;    
}
 

function bc_menu_alter(&$items) {
    $items['file/ajax']['file path'] = drupal_get_path('module', 'node');
    $items['file/ajax']['file'] = 'node.pages.inc';
    $items['system/ajax']['file path'] = drupal_get_path('module', 'node');
    $items['system/ajax']['file'] = 'node.pages.inc';

    $items['user/login']['type'] = MENU_CALLBACK;
    $items['user/register']['type'] = MENU_CALLBACK;
    $items['user/password']['type'] = MENU_CALLBACK;
}

function bc_form_alter(&$form, &$form_state, $form_id){
    //var_dump($form_id); 
    if($form_id=='user_register_form') {
        unset($form['account']['mail']['#description']);
        unset($form['account']['pass']['#description']);
        //var_dump($form['account']['pass']);
        
        $form['terms'] = array(
            '#markup' => '<h3>Noi quy va dieu khoan</h3><div id="terms-conditions">'.variable_get('bc_term_condition', '[Noi dung dieu khoan o day]').'</div>'
        );
        $form['terms_agree'] = array(
            '#type' => 'checkbox',
            '#title' =>'Toi dong y voi nhung dieu khoan tren'
        );
        $form['#validate'][] = 'bc_validate_agree_terms';

    }
    if($form_id=='user_login_block')  {
        $form['links']['#markup']='<div class="item-list"><ul>
<li class="last"><a href="/user/password" title="Request new password via e-mail.">'.t('Request new password').'</a></li>
</ul></div>';
    }
}

function bc_validate_agree_terms(&$form_state, $form_id){
    if(!$form_state['terms_agree']['#checked']){
        form_set_error('terms_agree', t('Please read and agree our Terms & Conditions and Privacy Policy'));
        
    }
}


function bc_menu(){
    $items['ajax-process'] = array(
        'title' => 'Ajax Process',
        'page callback' => 'bc_ajax_process',
        'access callback' => TRUE,
        'type' => MENU_SUGGESTED_ITEM,
    );

    $items['admin/config/master/basic'] = array(
        'title' => 'Tùy chỉnh cơ bản',
        'page callback' => 'bc_master_basic',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_TASK,
    );     
    $items['admin/config/master/home'] = array(
        'title' => 'Tùy chỉnh trang chủ',
        'page callback' => 'bc_master_home',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_TASK,
    );   

    $items['destination/autocomplete'] = array(
        'title' => 'Destination autocomplete',
        'page callback' => 'bc_destination_autocomplete',
        'access arguments' => array('use autocomplete'),  //or whatever permission makes sense
        'type' => MENU_CALLBACK
    );   

    return $items;
}

function bc_ajax_process(){
    $action = $_REQUEST['action'];
    drupal_session_start(); // allow session for anonymous
    global $user;
    
    if($action=='getAvaiablePlaces'){
        $results = db_query('SELECT title FROM node WHERE type=:type AND status=1', array(':type'=>'destination'))->fetchCol();
        echo json_encode($results);
        return ;
    }else if($action=='addCustomer'){
        echo theme('add_customer');
        return ;
    }else if($action=='addCustomTour'){
        //echo (var_dump($_REQUEST));
        
        /* init from clone, important */
        $tour = $_REQUEST['tour'];
        $node = node_load($tour['id']);
        $node->nid = NULL; // save new, not edit
        $node->vid = NULL;
        $node->type='custom_tour';
        $node->uid = $user->uid;
        //$node->title .= ' - '.$user->name;
        
        /* modify any fields */
        $node->field_start_date[LANGUAGE_NONE][0]['value'] = strtotime($tour['startDate']);
        $node->field_end_date[LANGUAGE_NONE][0]['value'] = strtotime($tour['endDate']);
        $node->field_total_day[LANGUAGE_NONE][0]['value'] = strtotime($tour['totalDay']);
        $node->field_tour_target[LANGUAGE_NONE][0]['value'] = strtotime($tour['target']);
        
        //customers 
        unset($node->field_traveller);
        foreach($tour['customers'] as $customer){
            $values = array(
                'field_name' => 'field_traveller',
                'field_human' => array(
                  LANGUAGE_NONE => array(array('value' => $customer['name'])),
                ),
                'field_phone' => array(
                  LANGUAGE_NONE => array(array('value' => $customer['phone'])),
                ),
                'field_email' => array(
                  LANGUAGE_NONE => array(array('value' => $customer['email'])),
                ),
                'field_old' => array(
                  LANGUAGE_NONE => array(array('value' => $customer['old'])),
                ),
            );
            $entity1 = entity_create('field_collection_item', $values);
            $entity1->setHostEntity('node', $node);
        }        
        $entity1->save();
        
        //trips
        /*
        $node->field_tour_detail = array();
        foreach($tour['trips'] as $trip){
            $values = array(
                'field_name' => 'field_tour_detail',
                'field_tour_detail_ref' => array(
                  LANGUAGE_NONE => array(array('nid' => 51)),
                ),
                'field_schedule_by_day' => array(
                  LANGUAGE_NONE => array(array('value' => $trip['bday'])),
                ),
                'field_schedule_by_day_part' => array(
                  LANGUAGE_NONE => array(array('value' => $trip['bdaypart'])),
                ),                
            );
            $entity2 = entity_create('field_collection_item', $values);
            $entity2->setHostEntity('node', $node);
        }                
        $entity2->save();
        */

        node_save($node);
        echo url('node/'.$node->nid);
        return;
    }
    
    echo "1";
    die;
}


function bc_mail($key, &$message, $params) {  

	$headers = array(
		'MIME-Version' => '1.0',
		'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
		'Content-Transfer-Encoding' => '8Bit',
		'X-Mailer' => 'Drupal'
	);
	$message['headers'] = $headers;
	

  switch ($key) {
    // Send a simple message from the contact form.
    case 'ntv_register_manage':
      $message['subject'] = 'NTV - Khách mới đăng ký: '.check_plain($params['name']).' - '.$params['ip'];	  
	  
      // Note that the message body is an array, not a string.
      $message['body'][] = '<div>Tài khoản: '.check_plain($params['name']).'</div>';
	  $message['body'][] ='<div>Điện thoại: '.check_plain($params['phone']).'</div>';
	  $message['body'][] = check_plain($params['message']);
      break;
	  
	case 'ntv_register_customer':
		$node = node_load(NID_MAIL_WELCOME);
		$message['subject'] = $node->title;
	  
		global $base_url;
		$tmp = $node->body[LANGUAGE_NONE][0]['value'];	
		$tmp = str_replace('@site', '<a href="'.$base_url.'">'.variable_get('site_name', "Niềm Tin Việt").'</a>', $tmp);
		$message['body'][] = $tmp;
		break;
  }
}

function bc_user_login(&$edit, $account) {
    /*if(user_has_role(RID_PAGE_MANAGER, $account)){
        $edit['redirect'] = 'admin/manage-service';		
	}else{
        $edit['redirect'] = '<front>';    	
    }*/
}



function bcform_search_destination($form_state, $form_id){
    $form['#action'] = url('search-result');
    $form['#method'] = 'get';
    $form['key']=array(
        '#type' => 'textfield',
        '#attributes'=> array('placeholder'=>t('Where to go?')),
        '#id' => 'txtSearchPlace',
        //'#autocomplete_path' => 'destination/autocomplete',           
    );  
    return $form;
}