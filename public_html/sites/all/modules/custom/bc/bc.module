<?php

require_once('consts.php');
require_once('libs.php');
//require_once('forms/search_destination.php');
        
$arr_theme = array(   
    'support_online' => 'Support Online',
    'home_prefooter' => 'Home Prefooter',
    'custom_login_area' => 'Custom login area',   
    'bc_user_profile' => 'User Profile',
    'bc_user_wall' => 'User Wall',
    'travel_blog' => 'Travel blog',
    'top_destinations' => 'Top Destinations',
    'top_videos' => 'Top Videos',
    'search_result' => 'Search Result',
    'add_customer' => 'Add Customer',
    'add_todo' => 'Add To do thing',
    'add_budget_cost' => 'Add budget cost',
    'add_urgent_contact' => 'Add urgent contact',
    'add_ticket' => 'Add Ticket',
    'add_new_post' => 'Add New Post',
    'user_update_profile' => 'User update Profile',    
    'own_hotel' => 'Own hotel',    
    'sb_custom_register' => 'SB Custom Register',
    'sb_custom_forgot_password' => 'SB Custom Forgot Password',
    'travel_plan' => 'Travel plan',
    //'tour_detail' => 'Tour Detail',
    //'place_detail' => 'Place Detail'
    // Booking
    'booking_request' => 'Booking Request'
);
define('ARR_THEME', serialize($arr_theme));

/**
 * Hook block_info
 */
function bc_block_info(){
    $arr_theme = unserialize(ARR_THEME); 
    foreach($arr_theme as $k=>$v){
        $blocks[$k] = array(
            'info' => $v
        );      
    }        
    return $blocks;
}

function bc_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
    $block['content'] = theme($delta);
    return $block;
}


function bc_theme() {
    $arr_theme = unserialize(ARR_THEME);
    $arr = array();
    foreach($arr_theme as $k=>$v){
        $arr[$k] = array(
            'path'=>drupal_get_path('module', 'bc') . '/templates',
            'template' => $k
        );
    }    
    // some theme have params 
    $arr['tour_information'] = array(
        'path'=>drupal_get_path('module', 'bc') . '/templates',
        'template' => 'tour_information',
        'variables'=> array('tour_node'=>NULL)
    );
    
    $arr['tour_detail'] = array(
        'path'=>drupal_get_path('module', 'bc') . '/templates',
        'template' => 'tour_detail',
        'variables'=> array('tour_detail'=>NULL)
    );
    $arr['place_detail'] = array(
        'path'=>drupal_get_path('module', 'bc') . '/templates',
        'template' => 'place_detail',
        'variables'=> array('place_id'=>NULL)
    );
    $arr['full_custom_tour_data'] = array(
        'path'=>drupal_get_path('module', 'bc') . '/templates',
        'template' => 'full_custom_tour_data',
        'variables'=> array('nid'=>NULL)
    );
    $arr['full_custom_tour_data2'] = array(
        'path'=>drupal_get_path('module', 'bc') . '/templates',
        'template' => 'full_custom_tour_data2',
        'variables'=> array('nid'=>NULL)
    );
    
    $arr['bc_user_header'] = array(
        'path'=>drupal_get_path('module', 'bc') . '/templates',
        'template' => 'bc_user_header',
        'variables'=> array('uid'=>NULL)
    );
    return $arr;    
}
 

function bc_menu_alter(&$items) {
    $items['file/ajax']['file path'] = drupal_get_path('module', 'node');
    $items['file/ajax']['file'] = 'node.pages.inc';
    $items['system/ajax']['file path'] = drupal_get_path('module', 'node');
    $items['system/ajax']['file'] = 'node.pages.inc';

    $items['user/login']['type'] = MENU_CALLBACK;
    $items['user/register']['type'] = MENU_CALLBACK;
    $items['user/password']['type'] = MENU_CALLBACK;
}

function bc_form_alter(&$form, &$form_state, $form_id){
    form_load_include($form_state, 'inc', 'node', 'node.pages'); // sher fix bug
    
    //var_dump($form_id);
    if($form_id=='user_register_form') {
        /*
        unset($form['account']['mail']['#description']);
        unset($form['account']['pass']['#description']);
        //var_dump($form['account']['pass']);
        
        $form['terms'] = array(
            '#markup' => '<h3>Noi quy va dieu khoan</h3><div id="terms-conditions">'.variable_get('bc_term_condition', '[Noi dung dieu khoan o day]').'</div>'
        );
        $form['terms_agree'] = array(
            '#type' => 'checkbox',
            '#title' =>'Toi dong y voi nhung dieu khoan tren'
        );
        $form['#validate'][] = 'bc_validate_agree_terms';
        */
        
        unset($form['account']['name']['#description']);
        unset($form['account']['name']['#title']);
        $form['account']['name']['#attributes']['placeholder']='Tên đăng nhập';
        unset($form['account']['mail']['#description']);
        unset($form['account']['mail']['#title']);
        $form['account']['mail']['#attributes']['placeholder']='Email';
        $form['account']['pass']['#process'] = array('form_process_password_confirm', 'register_alter_password_confirm');
        
       
    }
    if($form_id=='user_login_block')  {
        $form['links']['#markup']='<div class="item-list"><ul>
                <li class="last"><a href="/user/password" title="Request new password via e-mail.">'.t('Request new password').'</a></li>
            </ul></div>';
    }
    if($form_id=='user_login')  {
        //var_dump($form);
        unset($form['name']['#title']);
        unset($form['name']['#description']);
        $form['name']['#attributes']['placeholder']='Username/Email';
        
        unset($form['pass']['#title']);
        unset($form['pass']['#description']);
        $form['pass']['#attributes']['placeholder']='Password';
        
        $form['actions']['submit']['#value']='LOGIN';
        
        $form['links']['#markup']='<div id="anonymous-more">
                <div><a id="btn-register" href="#popup-register">Đăng Ký</a></div>
                <div><a id="btn-forgetpass" href="#popup-forgetpass">Quên Mật Khẩu</a></div>
            </div>';
        $form['links']['#weight']=9999;
        
    }
    
    if ($form_id == 'hotel_node_form') {
        $form['#submit'][]='update_location_item'; 
	if(is_numeric(arg(1))){ // edit
            $item = db_query('SELECT * FROM items WHERE nid=:nid', array(':nid'=>arg(1)))->fetchObject();	            
            if(!$item){
                $item = new stdClass();
		$item->nid = arg(1);
		$item->lat=10.799189;
                $item->lng=106.674716;
            }
            $form['location_lat'] = array(
                '#type' => 'textfield',
		'#title' => 'Lat',
		'#default_value' => $item->lat,
		'#weight'=>91
            );
            $form['location_lng'] = array(
                '#type' => 'textfield',
                '#title' => 'Lng',
		'#default_value' => $item->lng,
		'#weight'=>92
            );
            $html='';
            $html.='<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key='.MAPKEY.'"></script>';
            $html.='<div id="map-canvas" style="width:100%; height:500px;"></div><div id="marker-tooltip"></div>';
            $html.='<script>initialize(' . $item->lat . ', ' . $item->lng . ');</script>';
            $html.='<script>addMarker(' . $item->nid . ',' . $item->lat . ', ' . $item->lng . ', "",  "");</script>';          
            $form['location_map']=array(
		'#markup' => $html,
		'#weight' => 90
            );
	}
    }    
    if($form_id=='comment_node_tour_form'){
        //var_dump($form);
        unset($form['subject']);
        unset($form['actions']['preview']);
    }
}

 function register_alter_password_confirm($element) {
   unset($element['pass1']['#title']);
   unset($element['pass1']['#description']);
   $element['pass1']['#attributes']['placeholder'] = 'Mật khẩu';
   unset($element['pass2']['#title']);
   unset($element['pass2']['#description']);
   $element['pass2']['#attributes']['placeholder'] = 'Xác nhận mật khẩu';
   return $element;
 }
 
function update_location_item(&$form_state, $form_id){
    //var_dump($form_state);die;
    /* Khoa tam o local
    if(isset($form_state['nid']) && !empty($form_state['nid']['#value'])){
        db_query('update items SET lat=:lat, lng=:lng WHERE nid=:nid', array(
				':nid' => $form_state['nid']['#value'],
				':lat' => $form_state['location_lat']['#value'],
				':lng' => $form_state['location_lng']['#value'],
			));   
    }
    */
}
function bc_validate_agree_terms(&$form_state, $form_id){
    if(!$form_state['terms_agree']['#checked']){
        form_set_error('terms_agree', t('Please read and agree our Terms & Conditions and Privacy Policy'));
        
    }
}


function bc_menu(){
    $items['ajax-process'] = array(
        'title' => 'Ajax Process',
        'page callback' => 'bc_ajax_process',
        'access callback' => TRUE,
        'type' => MENU_SUGGESTED_ITEM,
    );
    
    $items['stest'] = array(
        'title' => 'stest',
        'page callback' => 'stest',
        'access callback' => TRUE,
        'type' => MENU_SUGGESTED_ITEM,
    );

    $items['admin/config/master/basic'] = array(
        'title' => 'Tùy chỉnh cơ bản',
        'page callback' => 'bc_master_basic',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_TASK,
    );     
    $items['admin/config/master/home'] = array(
        'title' => 'Tùy chỉnh trang chủ',
        'page callback' => 'bc_master_home',
        'access callback' => TRUE,
        'type' => MENU_LOCAL_TASK,
    );   

    $items['destination/autocomplete'] = array(
        'title' => 'Destination autocomplete',
        'page callback' => 'bc_destination_autocomplete',
        'access arguments' => array('use autocomplete'),  //or whatever permission makes sense
        'type' => MENU_CALLBACK
    );   

    return $items;
}

function stest(){    
    return '<div id="export-img">'.theme('full_custom_tour_data', array('nid'=>112)).'</div>';    
}

function bc_ajax_process(){
    $action = $_REQUEST['action'];
    drupal_session_start(); // allow session for anonymous
    global $user;
    
    if($action=='getAvaiablePlaces'){
        $results = db_query('SELECT title FROM node WHERE type=:type AND status=1', array(':type'=>'destination'))->fetchCol();
        echo json_encode($results);
        return ;
    }else if($action=='addCustomer'){
        echo theme('add_customer');
        return ;
    }else if($action=='addCustomTour'){
        
        
        /* init from clone, important */
        $tour = $_REQUEST['tour'];
        //echo (var_dump($tour['toDoWorks']));return;
        $node = node_load($tour['id']);
        if($tour['addNew']){
            $node->nid = NULL; // save new, not edit
            $node->vid = NULL;
            $node->type='custom_tour';
            $node->uid = $user->uid;
        }
        //$node->title .= ' - '.$user->name;
        
        /* modify any fields */
        $node->field_start_date[LANGUAGE_NONE][0]['value'] = $tour['background'];
        $node->field_start_date[LANGUAGE_NONE][0]['value'] = strtotime($tour['startDate']);
        $node->field_end_date[LANGUAGE_NONE][0]['value'] = strtotime($tour['endDate']);
        $node->field_total_day[LANGUAGE_NONE][0]['value'] = check_plain($tour['totalDay']);        
        $node->field_tour_target[LANGUAGE_NONE][0]['value'] = check_plain($tour['target']);
        $node->field_transportation_type[LANGUAGE_NONE][0]['value'] = check_plain($tour['transport']);
        $node->field_expect_budget[LANGUAGE_NONE][0]['value'] = check_plain($tour['budget']);
        
        
        //customers        
        $existed_custumers = (isset($node->field_traveller) && !empty($node->field_traveller[LANGUAGE_NONE]))? TRUE:FALSE;
        $k = 0;
        $entity1 = NULL;
        foreach($tour['customers'] as $customer){
            if($existed_custumers && isset($node->field_traveller[LANGUAGE_NONE][$k])){
                // update old
                $item = field_collection_item_load($node->field_traveller[LANGUAGE_NONE][$k]['value']);
                $item->field_human[LANGUAGE_NONE][0]['value'] = $customer['name'];
                $item->field_phone[LANGUAGE_NONE][0]['value'] = $customer['phone'];
                $item->field_email[LANGUAGE_NONE][0]['value'] = $customer['email'];
                $item->field_old[LANGUAGE_NONE][0]['value'] = $customer['old'];
                $item->save(TRUE);
                $k++;
            }else{
                // create new
                $values = array(
                    'field_name' => 'field_traveller',
                    'field_human' => array(
                        LANGUAGE_NONE => array(array('value' => $customer['name'])),
                    ),
                    'field_phone' => array(
                        LANGUAGE_NONE => array(array('value' => $customer['phone'])),
                    ),
                    'field_email' => array(
                        LANGUAGE_NONE => array(array('value' => $customer['email'])),
                    ),
                    'field_old' => array(
                        LANGUAGE_NONE => array(array('value' => 1)),
                    ),
                );
                $entity1 = entity_create('field_collection_item', $values);
                $entity1->setHostEntity('node', $node);
            }            
        }
        if($existed_custumers && count($node->field_traveller[LANGUAGE_NONE]) > $k){
            $field_collection_item_values = array();
            for($i=$k; $i<count($node->field_traveller[LANGUAGE_NONE]); $i++){
                $field_collection_item_values[] = $node->field_traveller[LANGUAGE_NONE][$i]['value'];               
                unset($node->field_traveller[LANGUAGE_NONE][$i]);
            }            
            // Delete field collection items.
            entity_delete_multiple('field_collection_item', $field_collection_item_values);
        }
        if($entity1){
            $entity1->save();
        }
        
        
        // to do list        
        
        $existed_todo = (isset($node->field_to_do) && !empty($node->field_to_do[LANGUAGE_NONE]))? TRUE:FALSE;
        $k = 0;
        $entity2 = NULL;
        foreach($tour['toDoWorks'] as $todo){
            if($existed_todo && isset($node->field_to_do[LANGUAGE_NONE][$k])){
                // update old
                $item = field_collection_item_load($node->field_to_do[LANGUAGE_NONE][$k]['value']);
                $item->field_title[LANGUAGE_NONE][0]['value'] = $todo['name'];
                $item->field_human[LANGUAGE_NONE][0]['value'] = $todo['human'];
                $item->field_deadline[LANGUAGE_NONE][0]['value'] = $todo['time'];
                $item->field_status[LANGUAGE_NONE][0]['value'] = $todo['status'];
                $item->field_note[LANGUAGE_NONE][0]['value'] = $todo['note'];
                $item->field_index[LANGUAGE_NONE][0]['value'] = $todo['prio'];
                $item->save(TRUE);
                $k++;
            }else{
                // create new
                $values = array(
                    'field_name' => 'field_to_do',
                    'field_title' => array( LANGUAGE_NONE => array(array('value' => $todo['name']))),
                    'field_human' => array(LANGUAGE_NONE => array(array('value' => $todo['human']))),
                    'field_deadline' => array(LANGUAGE_NONE => array(array('value' => $todo['time']))),
                    'field_status' => array(LANGUAGE_NONE => array(array('value' => $todo['status']))),
                    'field_note' => array(LANGUAGE_NONE => array(array('value' => $todo['note']))),
                    'field_index' => array(LANGUAGE_NONE => array(array('value' => $todo['prio']))),
                );
                $entity2 = entity_create('field_collection_item', $values);
                $entity2->setHostEntity('node', $node);
            }            
        }
        if($existed_todo && count($node->field_to_do[LANGUAGE_NONE]) > $k){
            $field_collection_item_values = array();
            for($i=$k; $i<count($node->field_to_do[LANGUAGE_NONE]); $i++){
                $field_collection_item_values[] = $node->field_to_do[LANGUAGE_NONE][$i]['value'];               
                unset($node->field_to_do[LANGUAGE_NONE][$i]);
            }            
            // Delete field collection items.
            entity_delete_multiple('field_collection_item', $field_collection_item_values);
        }
        if($entity2){
            $entity2->save();
        }
        
        // expense        
        $existed_expense = (isset($node->field_expense) && !empty($node->field_expense[LANGUAGE_NONE]))? TRUE:FALSE;
        $k = 0;
        $entity3 = NULL;
        foreach($tour['expense'] as $expense){
            if($existed_expense && isset($node->field_expense[LANGUAGE_NONE][$k])){
                // update old
                $item = field_collection_item_load($node->field_expense[LANGUAGE_NONE][$k]['value']);
                $item->field_expense_type[LANGUAGE_NONE][0]['value'] = $expense['type'];
                $item->field_human[LANGUAGE_NONE][0]['value'] = $expense['name'];
                $item->field_init[LANGUAGE_NONE][0]['value'] = $expense['uprice'];
                $item->field_number[LANGUAGE_NONE][0]['value'] = $expense['quantity'];
                $item->field_note[LANGUAGE_NONE][0]['value'] = $expense['note'];
                $item->field_total[LANGUAGE_NONE][0]['value'] = $expense['total'];
                $item->save(TRUE);
                $k++;
            }else{
                // create new
                $values = array(
                    'field_name' => 'field_expense',
                    'field_expense_type' => array( LANGUAGE_NONE => array(array('value' => $expense['type']))),
                    'field_human' => array(LANGUAGE_NONE => array(array('value' => $expense['name']))),
                    'field_init' => array(LANGUAGE_NONE => array(array('value' => $expense['uprice']))),
                    'field_number' => array(LANGUAGE_NONE => array(array('value' => $expense['quantity']))),
                    'field_note' => array(LANGUAGE_NONE => array(array('value' => $expense['note']))),
                    'field_total' => array(LANGUAGE_NONE => array(array('value' => $expense['total']))),
                );
                $entity3 = entity_create('field_collection_item', $values);
                $entity3->setHostEntity('node', $node);
            }            
        }
        if($existed_expense && count($node->field_expense[LANGUAGE_NONE]) > $k){
            $field_collection_item_values = array();
            for($i=$k; $i<count($node->field_expense[LANGUAGE_NONE]); $i++){
                $field_collection_item_values[] = $node->field_expense[LANGUAGE_NONE][$i]['value'];               
                unset($node->field_expense[LANGUAGE_NONE][$i]);
            }            
            // Delete field collection items.
            entity_delete_multiple('field_collection_item', $field_collection_item_values);
        }
        if($entity3){
            $entity3->save();
        }
        
        // urgent contact        
        $existed_ucontact = (isset($node->field_urgent_contact) && !empty($node->field_urgent_contact[LANGUAGE_NONE]))? TRUE:FALSE;
        $k = 0;
        $entity3 = NULL;
        foreach($tour['uContact'] as $contact){
            if($existed_ucontact && isset($node->field_urgent_contact[LANGUAGE_NONE][$k])){
                // update old
                $item = field_collection_item_load($node->field_urgent_contact[LANGUAGE_NONE][$k]['value']);
                $item->field_human[LANGUAGE_NONE][0]['value'] = $contact['name'];
                $item->field_phone[LANGUAGE_NONE][0]['value'] = $contact['phone'];
                $item->field_home_phone[LANGUAGE_NONE][0]['value'] = $contact['home_phone'];
                $item->field_address[LANGUAGE_NONE][0]['value'] = $contact['address'];
                $item->field_relation_ship[LANGUAGE_NONE][0]['value'] = $contact['relationship'];
                $item->field_note[LANGUAGE_NONE][0]['value'] = $contact['note'];
                $item->save(TRUE);
                $k++;
            }else{
                // create new
                $values = array(
                    'field_name' => 'field_urgent_contact',
                    'field_human' => array(LANGUAGE_NONE => array(array('value' => $contact['name']))),
                    'field_phone' => array( LANGUAGE_NONE => array(array('value' => $contact['phone']))),                    
                    'field_home_phone' => array(LANGUAGE_NONE => array(array('value' => $contact['home_phone']))),
                    'field_address' => array(LANGUAGE_NONE => array(array('value' => $contact['address']))),
                    'field_relation_ship' => array(LANGUAGE_NONE => array(array('value' => $contact['relationship']))),
                    'field_note' => array(LANGUAGE_NONE => array(array('value' => $contact['note']))),
                );
                $entity3 = entity_create('field_collection_item', $values);
                $entity3->setHostEntity('node', $node);
            }            
        }
        if($existed_ucontact && count($node->field_urgent_contact[LANGUAGE_NONE]) > $k){
            $field_collection_item_values = array();
            for($i=$k; $i<count($node->field_urgent_contact[LANGUAGE_NONE]); $i++){
                $field_collection_item_values[] = $node->field_urgent_contact[LANGUAGE_NONE][$i]['value'];               
                unset($node->field_urgent_contact[LANGUAGE_NONE][$i]);
            }            
            // Delete field collection items.
            entity_delete_multiple('field_collection_item', $field_collection_item_values);
        }
        if($entity3){
            $entity3->save();
        }
        
        // tickets
        $existed_tickets = (isset($node->field_tickets) && !empty($node->field_tickets[LANGUAGE_NONE]))? TRUE:FALSE;
        $k = 0;
        $entity5 = NULL;
        foreach($tour['tickets'] as $ticket){
            if($existed_tickets && isset($node->field_tickets[LANGUAGE_NONE][$k])){
                // update old
                $item = field_collection_item_load($node->field_tickets[LANGUAGE_NONE][$k]['value']);
                $item->field_datetime[LANGUAGE_NONE][0]['value'] = $ticket['datetime'];
                $item->field_start[LANGUAGE_NONE][0]['value'] = $ticket['start'];
                $item->field_goal[LANGUAGE_NONE][0]['value'] = $ticket['end'];
                $item->field_transport_type[LANGUAGE_NONE][0]['value'] = $ticket['type'];
                $item->field_ticket_num[LANGUAGE_NONE][0]['value'] = $ticket['num'];
                $item->field_note[LANGUAGE_NONE][0]['value'] = $ticket['note'];
                $item->save(TRUE);
                $k++;
            }else{
                // create new
                $values = array(
                    'field_name' => 'field_tickets',
                    'field_datetime' => array(LANGUAGE_NONE => array(array('value' => $ticket['datetime']))),
                    'field_start' => array( LANGUAGE_NONE => array(array('value' => $ticket['start']))),                    
                    'field_goal' => array(LANGUAGE_NONE => array(array('value' => $ticket['end']))),
                    'field_transport_type' => array(LANGUAGE_NONE => array(array('value' => $ticket['type']))),
                    'field_ticket_num' => array(LANGUAGE_NONE => array(array('value' => $ticket['num']))),
                    'field_note' => array(LANGUAGE_NONE => array(array('value' => $ticket['note']))),
                );
                $entity5 = entity_create('field_collection_item', $values);
                $entity5->setHostEntity('node', $node);
            }            
        }
        if($existed_tickets && count($node->field_tickets[LANGUAGE_NONE]) > $k){
            $field_collection_item_values = array();
            for($i=$k; $i<count($node->field_tickets[LANGUAGE_NONE]); $i++){
                $field_collection_item_values[] = $node->field_tickets[LANGUAGE_NONE][$i]['value'];               
                unset($node->field_tickets[LANGUAGE_NONE][$i]);
            }            
            // Delete field collection items.
            entity_delete_multiple('field_collection_item', $field_collection_item_values);
        }
        if($entity5){
            $entity5->save();
        }
       
        
        //trips
        $existed_trips = (isset($node->field_tour_detail) && !empty($node->field_tour_detail[LANGUAGE_NONE]))? TRUE:FALSE;
        $k = 0;
        $entity4 = NULL;
        foreach($tour['trips'] as $trip){
            if($existed_trips && isset($node->field_tour_detail[LANGUAGE_NONE][$k])){
                // update old
                $item = field_collection_item_load($node->field_tour_detail[LANGUAGE_NONE][$k]['value']);
                $item->field_des_name[LANGUAGE_NONE][0]['value'] = $trip['name'];
                $item->field_schedule_by_day[LANGUAGE_NONE][0]['value'] = $trip['bday'];                
                $item->field_schedule_by_day_part[LANGUAGE_NONE][0]['value'] = $trip['bdaypart'];
                //$item->field_des_des[LANGUAGE_NONE][0]['value'] = $trip['relationship'];
                //$item->field_avatar[LANGUAGE_NONE][0]['value'] = $trip['note'];
                $item->save(TRUE);
                $k++;
            }else{
                // create new
                $values = array(
                    'field_name' => 'field_tour_detail',
                    'field_des_name' => array(LANGUAGE_NONE => array(array('value' => $trip['name']))),
                    'field_schedule_by_day' => array( LANGUAGE_NONE => array(array('value' => $trip['bday']))),                    
                    'field_schedule_by_day_part' => array(LANGUAGE_NONE => array(array('value' => $trip['bdaypart']))),
                    //'field_des_des' => array(LANGUAGE_NONE => array(array('value' => $contact['address']))),
                    //'field_avatar' => array(LANGUAGE_NONE => array(array('value' => $contact['relationship'])))
                );
                $entity4 = entity_create('field_collection_item', $values);
                $entity4->setHostEntity('node', $node);
            }            
        }
        if($existed_trips && count($node->field_tour_detail[LANGUAGE_NONE]) > $k){
            $field_collection_item_values = array();
            for($i=$k; $i<count($node->field_tour_detail[LANGUAGE_NONE]); $i++){
                $field_collection_item_values[] = $node->field_tour_detail[LANGUAGE_NONE][$i]['value'];               
                unset($node->field_tour_detail[LANGUAGE_NONE][$i]);
            }            
            // Delete field collection items.
            entity_delete_multiple('field_collection_item', $field_collection_item_values);
        }
        if($entity4){
            $entity4->save();
        }

        node_save($node);
        echo url('node/'.$node->nid);
        return;
    }else if($action=='getFullCustomTourData'){
        $nid = check_plain($_REQUEST['nid']);
        echo theme('full_custom_tour_data', array('nid'=>$nid));
        return;
    }else if($action=='getFullCustomTourData2'){
        $nid = check_plain($_REQUEST['nid']);
        echo theme('full_custom_tour_data2', array('nid'=>$nid));
        return;
    }else if($action=='bookingRequest'){         
        $filter = $_REQUEST['filter'];            
        $des = db_query('SELECT nid, title FROM node WHERE type=:type AND title LIKE :title', array(
            ':type' => 'destination', ':title'=>'%'.db_like($filter['des']).'%'
        ))->fetchObject();
        
        $node = new stdClass();
        $node->type='booking_request';
        $node->uid = $user->uid;
        $node->status = $filter['status'];
        $node->title='Booking request by '.getUserName($user) . ' - '.$des->title;        
        
        if(is_numeric($des->nid)){
            $node->field_destination[LANGUAGE_NONE][0]['nid'] = $des->nid;
        }
        $node->field_check_in[LANGUAGE_NONE][0]['value'] = $filter['checkIn'];
        $node->field_check_out[LANGUAGE_NONE][0]['value'] = $filter['checkOut'];
        if(is_numeric($filter['nRoom'])){
            $node->field_n_room[LANGUAGE_NONE][0]['value'] = $filter['nRoom'];
        }
        if(is_numeric($filter['nAdult'])){
            $node->field_n_adult[LANGUAGE_NONE][0]['value'] = $filter['nAdult'];
        }
        if(is_numeric($filter['nChildren'])){
            $node->field_n_children[LANGUAGE_NONE][0]['value'] = $filter['nChildren'];
        }
        if(is_numeric($filter['dPPN'])){
            $node->field_price_per_night[LANGUAGE_NONE][0]['value'] = $filter['dPPN'];
        }
        $node->field_guest_rating[LANGUAGE_NONE][0]['value'] = $filter['rStar'];
        $node->field_star_rating[LANGUAGE_NONE][0]['value'] = $filter['rTripAdvisor'];
        $k=0;
        foreach($filter['cType'] as $type){
            $node->field_accomodation_type[LANGUAGE_NONE][$k++]['value']=$type;
        }        
        node_save($node);
    }else if($action=='loadRoomsByHotel'){  
        $hid = $_REQUEST['hid'];
        $hotel = node_load($hid);
        $tmp = new stdClass();
        $tmp->rooms='';
        foreach($hotel->field_room[LANGUAGE_NONE] as $k){
            $room = field_collection_item_load($k);
            $tmp->rooms.= '<option data-price="'.snh_display_price($room->field_price[LANGUAGE_NONE][0]['value']).'"  value="'.$room->item_id.'">'.$room->field_title[LANGUAGE_NONE][0]['value'].'</option>';
        }
        $first_room =  field_collection_item_load($hotel->field_room[LANGUAGE_NONE][0]);
        $tmp->price = snh_display_price($first_room->field_price[LANGUAGE_NONE][0]['value']);
        echo json_encode($tmp);
        return;
    }else if($action=='submitDeal'){  
        $deal = $_REQUEST['deal'];
        
        $nid = db_insert('deals') // Table name no longer needs {}
        ->fields(array(
          'bkrid' => $deal['bkrid'],
          'hid' => $deal['hid'],
            'rid' => $deal['rid'],
            'price' => $deal['price'],
            'uid' => $user->uid,
          'created' => REQUEST_TIME,
        ))
        ->execute();
                      
        echo snh_display_price($deal['price']);
        return;
    }else if($action=='submitCustomRegister'){
        $error = array();
        $name = $_REQUEST['name'];
        $email = $_REQUEST['email'];
        $pass = $_REQUEST['pass'];
        
        $exist = user_load_by_name($name);
        if($exist){
            $error['name']='Tên đăng nhập này đã được sử dụng';
        }
        
        if(!valid_email_address($email)){
            $error['mail']='Email không hợp lệ';
        }
        $exist = user_load_by_mail($email);
        if($exist){
            $error['mail']='Email này đã được sử dụng';
        }
        
        if(empty($error)){
            // create new user
            $new_user = array(
                'name' => $name,
                'pass' => $pass, // note: do not md5 the password
                'mail' => $email,
                'status' => 1,
                'init' => $email,
                'roles' => array(
                  DRUPAL_AUTHENTICATED_RID => 'authenticated user',
                  //3 => 'custom role',
                ),
          );

           // The first parameter is sent blank so a new user is created.
           user_save('', $new_user);           
        }else{
            echo json_encode($error);
            die;
        }
    }else if($action=='addToFavorite'){
        $nid = $_REQUEST['nid'];        
        $exist = db_query('SELECT * FROM sb_user_tour WHERE uid=:uid AND nid=:nid AND type=:type', 
                array(':uid'=>$user->uid, ':nid'=>$nid, ':type'=>MARK_FAVORITE))->fetchAll();
        if(!$exist){
            db_query('INSERT INTO sb_user_tour (uid, nid, type, created) VALUES (:uid, :nid, :type, :created)', 
                    array(':uid'=>$user->uid, ':nid'=>$nid, ':type'=>MARK_FAVORITE, ':created'=>time()));
        }        
        echo url('travel-plan');
        return;
    }else if($action == 'ForgetPass'){
        $mail = $_REQUEST['mail'];
        if(!valid_email_address($mail)){
            echo '<div class="error">Vui lòng nhập đúng địa chỉ Email</div>';
            return;
        }
        if(!user_load_by_mail($mail)){
            echo '<div class="error">Địa chỉ mail này không tồn tại trong hệ thống. Hãy thử lại</div>';
            return;
        }
        // gửi mail reset pass ở đây
        _user_mail_notify('password_reset', $user);
        echo '<div class="success">Hãy kiểm tra Email</div>';
        return;
    }
    
    echo "1";
    die;
}


function bc_mail($key, &$message, $params) {  

	$headers = array(
		'MIME-Version' => '1.0',
		'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
		'Content-Transfer-Encoding' => '8Bit',
		'X-Mailer' => 'Drupal'
	);
	$message['headers'] = $headers;
	

  switch ($key) {
    // Send a simple message from the contact form.
    case 'ntv_register_manage':
      $message['subject'] = 'NTV - Khách mới đăng ký: '.check_plain($params['name']).' - '.$params['ip'];	  
	  
      // Note that the message body is an array, not a string.
      $message['body'][] = '<div>Tài khoản: '.check_plain($params['name']).'</div>';
	  $message['body'][] ='<div>Điện thoại: '.check_plain($params['phone']).'</div>';
	  $message['body'][] = check_plain($params['message']);
      break;
	  
	case 'ntv_register_customer':
		$node = node_load(NID_MAIL_WELCOME);
		$message['subject'] = $node->title;
	  
		global $base_url;
		$tmp = $node->body[LANGUAGE_NONE][0]['value'];	
		$tmp = str_replace('@site', '<a href="'.$base_url.'">'.variable_get('site_name', "Niềm Tin Việt").'</a>', $tmp);
		$message['body'][] = $tmp;
		break;
  }
}

function bc_user_login(&$edit, $account) {
    if(user_has_role(RID_MANAGE, $account)){
        $edit['redirect'] = 'admin/manage-destination';		
    }else{
        $edit['redirect'] = '<front>';    	
    }
}



function bcform_search_destination($form_state, $form_id){
    $form['#action'] = url('search-result');
    $form['#method'] = 'get';
    $form['key']=array(
        '#type' => 'textfield',
        '#attributes'=> array('placeholder'=>'Bạn muốn đi nơi đâu?'),
        '#id' => 'txtSearchPlace',
        //'#autocomplete_path' => 'destination/autocomplete',           
    );  
    
    $form['submit']=array(
        '#type' => 'submit',
        '#value' => 'Tìm kiếm',
        '#id' => 'btnHomeSearch'
    );  
    return $form;
}

function bc_node_insert($node){
    if($node->type=='hotel'){
        //if($node->is_new){
            $address = $node->field_address[LANGUAGE_NONE][0]['value'];
		$coordinate = getCoordinatesByAddress($address); 
		if($coordinate){	                    
			db_query('insert into items (nid, lat, lng)'
					. ' values (:nid, :lat, :lng)', array(
				':nid' => $node->nid,
				':lat' => $coordinate->lat,
				':lng' => $coordinate->lng            
			));
		}
        //}
    }
}



function bc_node_update($node){
    // luc insert new moi get location, luc update thi location trong textfield tren form
    /*if($node->type=='hotel'){

            $address = $node->field_address[LANGUAGE_NONE][0]['value'];
		$coordinate = getCoordinatesByAddress($address);                 
		if($coordinate){	                    
			db_query('update items SET lat=:lat, lng=:lng WHERE nid=:nid', array(
				':nid' => $node->nid,
				':lat' => $coordinate->lat,
				':lng' => $coordinate->lng            
			));                       
		}

    }*/
}



function bc_preprocess_page(&$variables){
    if(arg(0)=='node' && is_numeric(arg(1))){
        $node = node_load(arg(1));        
        if($node->type=='custom_tour'){
            $u = user_load($node->uid);
            drupal_set_title($node->title. ' ('.$u->name.')');
        }
    }
}